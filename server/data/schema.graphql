# Autogenerated input type of AddFeature
input AddFeatureInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  name: String!
  description: String!
  url: String!
}

# Autogenerated return type of AddFeature
type AddFeaturePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  featureEdge: FeatureEdge
  viewer: User
}

type Feature implements Node {
  description: String
  id: ID!
  name: String
  url: String
}

# The connection type for Feature.
type FeatureConnection {
  # A list of edges.
  edges: [FeatureEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type FeatureEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Feature
}

type Mutation {
  addFeature(input: AddFeatureInput!): AddFeaturePayload
}

# An object with an ID.
interface Node {
  # ID of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, the cursor to continue.
  endCursor: String

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String
}

type Query {
  # Fetches an object given its ID.
  node(
    # ID of the object.
    id: ID!
  ): Node

  # Fetches a list of objects given a list of IDs.
  nodes(
    # IDs of the objects.
    ids: [ID!]!
  ): [Node]!
  viewer: User
}

type User implements Node {
  features(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
  ): FeatureConnection
  id: ID!
  username: String!
  website: String!
}
